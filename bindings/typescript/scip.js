"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.scip = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: scip.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 *  */
const pb_1 = require("google-protobuf");
var scip;
(function (scip) {
    let ProtocolVersion;
    (function (ProtocolVersion) {
        ProtocolVersion[ProtocolVersion["UnspecifiedProtocolVersion"] = 0] = "UnspecifiedProtocolVersion";
    })(ProtocolVersion = scip.ProtocolVersion || (scip.ProtocolVersion = {}));
    let TextEncoding;
    (function (TextEncoding) {
        TextEncoding[TextEncoding["UnspecifiedTextEncoding"] = 0] = "UnspecifiedTextEncoding";
        TextEncoding[TextEncoding["UTF8"] = 1] = "UTF8";
        TextEncoding[TextEncoding["UTF16"] = 2] = "UTF16";
    })(TextEncoding = scip.TextEncoding || (scip.TextEncoding = {}));
    let SymbolRole;
    (function (SymbolRole) {
        SymbolRole[SymbolRole["UnspecifiedSymbolRole"] = 0] = "UnspecifiedSymbolRole";
        SymbolRole[SymbolRole["Definition"] = 1] = "Definition";
        SymbolRole[SymbolRole["Import"] = 2] = "Import";
        SymbolRole[SymbolRole["WriteAccess"] = 4] = "WriteAccess";
        SymbolRole[SymbolRole["ReadAccess"] = 8] = "ReadAccess";
        SymbolRole[SymbolRole["Generated"] = 16] = "Generated";
        SymbolRole[SymbolRole["Test"] = 32] = "Test";
    })(SymbolRole = scip.SymbolRole || (scip.SymbolRole = {}));
    let SyntaxKind;
    (function (SyntaxKind) {
        SyntaxKind[SyntaxKind["UnspecifiedSyntaxKind"] = 0] = "UnspecifiedSyntaxKind";
        SyntaxKind[SyntaxKind["Comment"] = 1] = "Comment";
        SyntaxKind[SyntaxKind["PunctuationDelimiter"] = 2] = "PunctuationDelimiter";
        SyntaxKind[SyntaxKind["PunctuationBracket"] = 3] = "PunctuationBracket";
        SyntaxKind[SyntaxKind["IdentifierKeyword"] = 4] = "IdentifierKeyword";
        SyntaxKind[SyntaxKind["IdentifierOperator"] = 5] = "IdentifierOperator";
        SyntaxKind[SyntaxKind["Identifier"] = 6] = "Identifier";
        SyntaxKind[SyntaxKind["IdentifierBuiltin"] = 7] = "IdentifierBuiltin";
        SyntaxKind[SyntaxKind["IdentifierNull"] = 8] = "IdentifierNull";
        SyntaxKind[SyntaxKind["IdentifierConstant"] = 9] = "IdentifierConstant";
        SyntaxKind[SyntaxKind["IdentifierMutableGlobal"] = 10] = "IdentifierMutableGlobal";
        SyntaxKind[SyntaxKind["IdentifierParameter"] = 11] = "IdentifierParameter";
        SyntaxKind[SyntaxKind["IdentifierLocal"] = 12] = "IdentifierLocal";
        SyntaxKind[SyntaxKind["IdentifierShadowed"] = 13] = "IdentifierShadowed";
        SyntaxKind[SyntaxKind["IdentifierModule"] = 14] = "IdentifierModule";
        SyntaxKind[SyntaxKind["IdentifierFunction"] = 15] = "IdentifierFunction";
        SyntaxKind[SyntaxKind["IdentifierFunctionDefinition"] = 16] = "IdentifierFunctionDefinition";
        SyntaxKind[SyntaxKind["IdentifierMacro"] = 17] = "IdentifierMacro";
        SyntaxKind[SyntaxKind["IdentifierMacroDefinition"] = 18] = "IdentifierMacroDefinition";
        SyntaxKind[SyntaxKind["IdentifierType"] = 19] = "IdentifierType";
        SyntaxKind[SyntaxKind["IdentifierBuiltinType"] = 20] = "IdentifierBuiltinType";
        SyntaxKind[SyntaxKind["IdentifierAttribute"] = 21] = "IdentifierAttribute";
        SyntaxKind[SyntaxKind["RegexEscape"] = 22] = "RegexEscape";
        SyntaxKind[SyntaxKind["RegexRepeated"] = 23] = "RegexRepeated";
        SyntaxKind[SyntaxKind["RegexWildcard"] = 24] = "RegexWildcard";
        SyntaxKind[SyntaxKind["RegexDelimiter"] = 25] = "RegexDelimiter";
        SyntaxKind[SyntaxKind["RegexJoin"] = 26] = "RegexJoin";
        SyntaxKind[SyntaxKind["StringLiteral"] = 27] = "StringLiteral";
        SyntaxKind[SyntaxKind["StringLiteralEscape"] = 28] = "StringLiteralEscape";
        SyntaxKind[SyntaxKind["StringLiteralSpecial"] = 29] = "StringLiteralSpecial";
        SyntaxKind[SyntaxKind["StringLiteralKey"] = 30] = "StringLiteralKey";
        SyntaxKind[SyntaxKind["CharacterLiteral"] = 31] = "CharacterLiteral";
        SyntaxKind[SyntaxKind["NumericLiteral"] = 32] = "NumericLiteral";
        SyntaxKind[SyntaxKind["BooleanLiteral"] = 33] = "BooleanLiteral";
        SyntaxKind[SyntaxKind["Tag"] = 34] = "Tag";
        SyntaxKind[SyntaxKind["TagAttribute"] = 35] = "TagAttribute";
        SyntaxKind[SyntaxKind["TagDelimiter"] = 36] = "TagDelimiter";
    })(SyntaxKind = scip.SyntaxKind || (scip.SyntaxKind = {}));
    let Severity;
    (function (Severity) {
        Severity[Severity["UnspecifiedSeverity"] = 0] = "UnspecifiedSeverity";
        Severity[Severity["Error"] = 1] = "Error";
        Severity[Severity["Warning"] = 2] = "Warning";
        Severity[Severity["Information"] = 3] = "Information";
        Severity[Severity["Hint"] = 4] = "Hint";
    })(Severity = scip.Severity || (scip.Severity = {}));
    let DiagnosticTag;
    (function (DiagnosticTag) {
        DiagnosticTag[DiagnosticTag["UnspecifiedDiagnosticTag"] = 0] = "UnspecifiedDiagnosticTag";
        DiagnosticTag[DiagnosticTag["Unnecessary"] = 1] = "Unnecessary";
        DiagnosticTag[DiagnosticTag["Deprecated"] = 2] = "Deprecated";
    })(DiagnosticTag = scip.DiagnosticTag || (scip.DiagnosticTag = {}));
    class Index extends pb_1.Message {
        constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("documents" in data && data.documents != undefined) {
                    this.documents = data.documents;
                }
                if ("external_symbols" in data && data.external_symbols != undefined) {
                    this.external_symbols = data.external_symbols;
                }
            }
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, Metadata, 1);
        }
        set metadata(value) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get documents() {
            return pb_1.Message.getRepeatedWrapperField(this, Document, 2);
        }
        set documents(value) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get external_symbols() {
            return pb_1.Message.getRepeatedWrapperField(this, SymbolInformation, 3);
        }
        set external_symbols(value) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data) {
            const message = new Index({});
            if (data.metadata != null) {
                message.metadata = Metadata.fromObject(data.metadata);
            }
            if (data.documents != null) {
                message.documents = data.documents.map(item => Document.fromObject(item));
            }
            if (data.external_symbols != null) {
                message.external_symbols = data.external_symbols.map(item => SymbolInformation.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.documents != null) {
                data.documents = this.documents.map((item) => item.toObject());
            }
            if (this.external_symbols != null) {
                data.external_symbols = this.external_symbols.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.metadata !== undefined)
                writer.writeMessage(1, this.metadata, () => this.metadata.serialize(writer));
            if (this.documents !== undefined)
                writer.writeRepeatedMessage(2, this.documents, (item) => item.serialize(writer));
            if (this.external_symbols !== undefined)
                writer.writeRepeatedMessage(3, this.external_symbols, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Index();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.documents, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Document.deserialize(reader), Document));
                        break;
                    case 3:
                        reader.readMessage(message.external_symbols, () => pb_1.Message.addToRepeatedWrapperField(message, 3, SymbolInformation.deserialize(reader), SymbolInformation));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return Index.deserialize(bytes);
        }
    }
    scip.Index = Index;
    class Metadata extends pb_1.Message {
        constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("tool_info" in data && data.tool_info != undefined) {
                    this.tool_info = data.tool_info;
                }
                if ("project_root" in data && data.project_root != undefined) {
                    this.project_root = data.project_root;
                }
                if ("text_document_encoding" in data && data.text_document_encoding != undefined) {
                    this.text_document_encoding = data.text_document_encoding;
                }
            }
        }
        get version() {
            return pb_1.Message.getField(this, 1);
        }
        set version(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get tool_info() {
            return pb_1.Message.getWrapperField(this, ToolInfo, 2);
        }
        set tool_info(value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get project_root() {
            return pb_1.Message.getField(this, 3);
        }
        set project_root(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get text_document_encoding() {
            return pb_1.Message.getField(this, 4);
        }
        set text_document_encoding(value) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data) {
            const message = new Metadata({});
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.tool_info != null) {
                message.tool_info = ToolInfo.fromObject(data.tool_info);
            }
            if (data.project_root != null) {
                message.project_root = data.project_root;
            }
            if (data.text_document_encoding != null) {
                message.text_document_encoding = data.text_document_encoding;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.tool_info != null) {
                data.tool_info = this.tool_info.toObject();
            }
            if (this.project_root != null) {
                data.project_root = this.project_root;
            }
            if (this.text_document_encoding != null) {
                data.text_document_encoding = this.text_document_encoding;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version !== undefined)
                writer.writeEnum(1, this.version);
            if (this.tool_info !== undefined)
                writer.writeMessage(2, this.tool_info, () => this.tool_info.serialize(writer));
            if (typeof this.project_root === "string" && this.project_root.length)
                writer.writeString(3, this.project_root);
            if (this.text_document_encoding !== undefined)
                writer.writeEnum(4, this.text_document_encoding);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Metadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.tool_info, () => message.tool_info = ToolInfo.deserialize(reader));
                        break;
                    case 3:
                        message.project_root = reader.readString();
                        break;
                    case 4:
                        message.text_document_encoding = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return Metadata.deserialize(bytes);
        }
    }
    scip.Metadata = Metadata;
    class ToolInfo extends pb_1.Message {
        constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("arguments" in data && data.arguments != undefined) {
                    this.arguments = data.arguments;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1);
        }
        set name(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get version() {
            return pb_1.Message.getField(this, 2);
        }
        set version(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get arguments() {
            return pb_1.Message.getField(this, 3);
        }
        set arguments(value) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data) {
            const message = new ToolInfo({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.arguments != null) {
                message.arguments = data.arguments;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.arguments != null) {
                data.arguments = this.arguments;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (typeof this.version === "string" && this.version.length)
                writer.writeString(2, this.version);
            if (this.arguments !== undefined)
                writer.writeRepeatedString(3, this.arguments);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ToolInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.version = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return ToolInfo.deserialize(bytes);
        }
    }
    scip.ToolInfo = ToolInfo;
    class Document extends pb_1.Message {
        constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("relative_path" in data && data.relative_path != undefined) {
                    this.relative_path = data.relative_path;
                }
                if ("occurrences" in data && data.occurrences != undefined) {
                    this.occurrences = data.occurrences;
                }
                if ("symbols" in data && data.symbols != undefined) {
                    this.symbols = data.symbols;
                }
            }
        }
        get relative_path() {
            return pb_1.Message.getField(this, 1);
        }
        set relative_path(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get occurrences() {
            return pb_1.Message.getRepeatedWrapperField(this, Occurrence, 2);
        }
        set occurrences(value) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get symbols() {
            return pb_1.Message.getRepeatedWrapperField(this, SymbolInformation, 3);
        }
        set symbols(value) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data) {
            const message = new Document({});
            if (data.relative_path != null) {
                message.relative_path = data.relative_path;
            }
            if (data.occurrences != null) {
                message.occurrences = data.occurrences.map(item => Occurrence.fromObject(item));
            }
            if (data.symbols != null) {
                message.symbols = data.symbols.map(item => SymbolInformation.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.relative_path != null) {
                data.relative_path = this.relative_path;
            }
            if (this.occurrences != null) {
                data.occurrences = this.occurrences.map((item) => item.toObject());
            }
            if (this.symbols != null) {
                data.symbols = this.symbols.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.relative_path === "string" && this.relative_path.length)
                writer.writeString(1, this.relative_path);
            if (this.occurrences !== undefined)
                writer.writeRepeatedMessage(2, this.occurrences, (item) => item.serialize(writer));
            if (this.symbols !== undefined)
                writer.writeRepeatedMessage(3, this.symbols, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Document();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.relative_path = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.occurrences, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Occurrence.deserialize(reader), Occurrence));
                        break;
                    case 3:
                        reader.readMessage(message.symbols, () => pb_1.Message.addToRepeatedWrapperField(message, 3, SymbolInformation.deserialize(reader), SymbolInformation));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return Document.deserialize(bytes);
        }
    }
    scip.Document = Document;
    class Symbol extends pb_1.Message {
        constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scheme" in data && data.scheme != undefined) {
                    this.scheme = data.scheme;
                }
                if ("package" in data && data.package != undefined) {
                    this.package = data.package;
                }
                if ("descriptors" in data && data.descriptors != undefined) {
                    this.descriptors = data.descriptors;
                }
            }
        }
        get scheme() {
            return pb_1.Message.getField(this, 1);
        }
        set scheme(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get package() {
            return pb_1.Message.getWrapperField(this, Package, 2);
        }
        set package(value) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get descriptors() {
            return pb_1.Message.getRepeatedWrapperField(this, Descriptor, 3);
        }
        set descriptors(value) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data) {
            const message = new Symbol({});
            if (data.scheme != null) {
                message.scheme = data.scheme;
            }
            if (data.package != null) {
                message.package = Package.fromObject(data.package);
            }
            if (data.descriptors != null) {
                message.descriptors = data.descriptors.map(item => Descriptor.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.scheme != null) {
                data.scheme = this.scheme;
            }
            if (this.package != null) {
                data.package = this.package.toObject();
            }
            if (this.descriptors != null) {
                data.descriptors = this.descriptors.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.scheme === "string" && this.scheme.length)
                writer.writeString(1, this.scheme);
            if (this.package !== undefined)
                writer.writeMessage(2, this.package, () => this.package.serialize(writer));
            if (this.descriptors !== undefined)
                writer.writeRepeatedMessage(3, this.descriptors, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Symbol();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scheme = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.package, () => message.package = Package.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.descriptors, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Descriptor.deserialize(reader), Descriptor));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return Symbol.deserialize(bytes);
        }
    }
    scip.Symbol = Symbol;
    class Package extends pb_1.Message {
        constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("manager" in data && data.manager != undefined) {
                    this.manager = data.manager;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
            }
        }
        get manager() {
            return pb_1.Message.getField(this, 1);
        }
        set manager(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getField(this, 2);
        }
        set name(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get version() {
            return pb_1.Message.getField(this, 3);
        }
        set version(value) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data) {
            const message = new Package({});
            if (data.manager != null) {
                message.manager = data.manager;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.manager != null) {
                data.manager = this.manager;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.manager === "string" && this.manager.length)
                writer.writeString(1, this.manager);
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(2, this.name);
            if (typeof this.version === "string" && this.version.length)
                writer.writeString(3, this.version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Package();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.manager = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.version = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return Package.deserialize(bytes);
        }
    }
    scip.Package = Package;
    class Descriptor extends pb_1.Message {
        constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("disambiguator" in data && data.disambiguator != undefined) {
                    this.disambiguator = data.disambiguator;
                }
                if ("suffix" in data && data.suffix != undefined) {
                    this.suffix = data.suffix;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1);
        }
        set name(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get disambiguator() {
            return pb_1.Message.getField(this, 2);
        }
        set disambiguator(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get suffix() {
            return pb_1.Message.getField(this, 3);
        }
        set suffix(value) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data) {
            const message = new Descriptor({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.disambiguator != null) {
                message.disambiguator = data.disambiguator;
            }
            if (data.suffix != null) {
                message.suffix = data.suffix;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.disambiguator != null) {
                data.disambiguator = this.disambiguator;
            }
            if (this.suffix != null) {
                data.suffix = this.suffix;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (typeof this.disambiguator === "string" && this.disambiguator.length)
                writer.writeString(2, this.disambiguator);
            if (this.suffix !== undefined)
                writer.writeEnum(3, this.suffix);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Descriptor();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.disambiguator = reader.readString();
                        break;
                    case 3:
                        message.suffix = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return Descriptor.deserialize(bytes);
        }
    }
    scip.Descriptor = Descriptor;
    (function (Descriptor) {
        let Suffix;
        (function (Suffix) {
            Suffix[Suffix["UnspecifiedSuffix"] = 0] = "UnspecifiedSuffix";
            Suffix[Suffix["Package"] = 1] = "Package";
            Suffix[Suffix["Type"] = 2] = "Type";
            Suffix[Suffix["Term"] = 3] = "Term";
            Suffix[Suffix["Method"] = 4] = "Method";
            Suffix[Suffix["TypeParameter"] = 5] = "TypeParameter";
            Suffix[Suffix["Parameter"] = 6] = "Parameter";
            Suffix[Suffix["Meta"] = 7] = "Meta";
            Suffix[Suffix["Local"] = 8] = "Local";
        })(Suffix = Descriptor.Suffix || (Descriptor.Suffix = {}));
    })(Descriptor = scip.Descriptor || (scip.Descriptor = {}));
    class SymbolInformation extends pb_1.Message {
        constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("symbol" in data && data.symbol != undefined) {
                    this.symbol = data.symbol;
                }
                if ("documentation" in data && data.documentation != undefined) {
                    this.documentation = data.documentation;
                }
                if ("relationships" in data && data.relationships != undefined) {
                    this.relationships = data.relationships;
                }
            }
        }
        get symbol() {
            return pb_1.Message.getField(this, 1);
        }
        set symbol(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get documentation() {
            return pb_1.Message.getField(this, 3);
        }
        set documentation(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get relationships() {
            return pb_1.Message.getRepeatedWrapperField(this, Relationship, 4);
        }
        set relationships(value) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data) {
            const message = new SymbolInformation({});
            if (data.symbol != null) {
                message.symbol = data.symbol;
            }
            if (data.documentation != null) {
                message.documentation = data.documentation;
            }
            if (data.relationships != null) {
                message.relationships = data.relationships.map(item => Relationship.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.symbol != null) {
                data.symbol = this.symbol;
            }
            if (this.documentation != null) {
                data.documentation = this.documentation;
            }
            if (this.relationships != null) {
                data.relationships = this.relationships.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.symbol === "string" && this.symbol.length)
                writer.writeString(1, this.symbol);
            if (this.documentation !== undefined)
                writer.writeRepeatedString(3, this.documentation);
            if (this.relationships !== undefined)
                writer.writeRepeatedMessage(4, this.relationships, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SymbolInformation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.symbol = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        reader.readMessage(message.relationships, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Relationship.deserialize(reader), Relationship));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return SymbolInformation.deserialize(bytes);
        }
    }
    scip.SymbolInformation = SymbolInformation;
    class Relationship extends pb_1.Message {
        constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("symbol" in data && data.symbol != undefined) {
                    this.symbol = data.symbol;
                }
                if ("is_reference" in data && data.is_reference != undefined) {
                    this.is_reference = data.is_reference;
                }
                if ("is_implementation" in data && data.is_implementation != undefined) {
                    this.is_implementation = data.is_implementation;
                }
                if ("is_type_definition" in data && data.is_type_definition != undefined) {
                    this.is_type_definition = data.is_type_definition;
                }
            }
        }
        get symbol() {
            return pb_1.Message.getField(this, 1);
        }
        set symbol(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_reference() {
            return pb_1.Message.getField(this, 2);
        }
        set is_reference(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get is_implementation() {
            return pb_1.Message.getField(this, 3);
        }
        set is_implementation(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get is_type_definition() {
            return pb_1.Message.getField(this, 4);
        }
        set is_type_definition(value) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data) {
            const message = new Relationship({});
            if (data.symbol != null) {
                message.symbol = data.symbol;
            }
            if (data.is_reference != null) {
                message.is_reference = data.is_reference;
            }
            if (data.is_implementation != null) {
                message.is_implementation = data.is_implementation;
            }
            if (data.is_type_definition != null) {
                message.is_type_definition = data.is_type_definition;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.symbol != null) {
                data.symbol = this.symbol;
            }
            if (this.is_reference != null) {
                data.is_reference = this.is_reference;
            }
            if (this.is_implementation != null) {
                data.is_implementation = this.is_implementation;
            }
            if (this.is_type_definition != null) {
                data.is_type_definition = this.is_type_definition;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.symbol === "string" && this.symbol.length)
                writer.writeString(1, this.symbol);
            if (this.is_reference !== undefined)
                writer.writeBool(2, this.is_reference);
            if (this.is_implementation !== undefined)
                writer.writeBool(3, this.is_implementation);
            if (this.is_type_definition !== undefined)
                writer.writeBool(4, this.is_type_definition);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Relationship();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.symbol = reader.readString();
                        break;
                    case 2:
                        message.is_reference = reader.readBool();
                        break;
                    case 3:
                        message.is_implementation = reader.readBool();
                        break;
                    case 4:
                        message.is_type_definition = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return Relationship.deserialize(bytes);
        }
    }
    scip.Relationship = Relationship;
    class Occurrence extends pb_1.Message {
        constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 4, 6], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("range" in data && data.range != undefined) {
                    this.range = data.range;
                }
                if ("symbol" in data && data.symbol != undefined) {
                    this.symbol = data.symbol;
                }
                if ("symbol_roles" in data && data.symbol_roles != undefined) {
                    this.symbol_roles = data.symbol_roles;
                }
                if ("override_documentation" in data && data.override_documentation != undefined) {
                    this.override_documentation = data.override_documentation;
                }
                if ("syntax_kind" in data && data.syntax_kind != undefined) {
                    this.syntax_kind = data.syntax_kind;
                }
                if ("diagnostics" in data && data.diagnostics != undefined) {
                    this.diagnostics = data.diagnostics;
                }
            }
        }
        get range() {
            return pb_1.Message.getField(this, 1);
        }
        set range(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get symbol() {
            return pb_1.Message.getField(this, 2);
        }
        set symbol(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get symbol_roles() {
            return pb_1.Message.getField(this, 3);
        }
        set symbol_roles(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get override_documentation() {
            return pb_1.Message.getField(this, 4);
        }
        set override_documentation(value) {
            pb_1.Message.setField(this, 4, value);
        }
        get syntax_kind() {
            return pb_1.Message.getField(this, 5);
        }
        set syntax_kind(value) {
            pb_1.Message.setField(this, 5, value);
        }
        get diagnostics() {
            return pb_1.Message.getRepeatedWrapperField(this, Diagnostic, 6);
        }
        set diagnostics(value) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data) {
            const message = new Occurrence({});
            if (data.range != null) {
                message.range = data.range;
            }
            if (data.symbol != null) {
                message.symbol = data.symbol;
            }
            if (data.symbol_roles != null) {
                message.symbol_roles = data.symbol_roles;
            }
            if (data.override_documentation != null) {
                message.override_documentation = data.override_documentation;
            }
            if (data.syntax_kind != null) {
                message.syntax_kind = data.syntax_kind;
            }
            if (data.diagnostics != null) {
                message.diagnostics = data.diagnostics.map(item => Diagnostic.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.range != null) {
                data.range = this.range;
            }
            if (this.symbol != null) {
                data.symbol = this.symbol;
            }
            if (this.symbol_roles != null) {
                data.symbol_roles = this.symbol_roles;
            }
            if (this.override_documentation != null) {
                data.override_documentation = this.override_documentation;
            }
            if (this.syntax_kind != null) {
                data.syntax_kind = this.syntax_kind;
            }
            if (this.diagnostics != null) {
                data.diagnostics = this.diagnostics.map((item) => item.toObject());
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.range !== undefined)
                writer.writePackedInt32(1, this.range);
            if (typeof this.symbol === "string" && this.symbol.length)
                writer.writeString(2, this.symbol);
            if (this.symbol_roles !== undefined)
                writer.writeInt32(3, this.symbol_roles);
            if (this.override_documentation !== undefined)
                writer.writeRepeatedString(4, this.override_documentation);
            if (this.syntax_kind !== undefined)
                writer.writeEnum(5, this.syntax_kind);
            if (this.diagnostics !== undefined)
                writer.writeRepeatedMessage(6, this.diagnostics, (item) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Occurrence();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.range = reader.readPackedInt32();
                        break;
                    case 2:
                        message.symbol = reader.readString();
                        break;
                    case 3:
                        message.symbol_roles = reader.readInt32();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        message.syntax_kind = reader.readEnum();
                        break;
                    case 6:
                        reader.readMessage(message.diagnostics, () => pb_1.Message.addToRepeatedWrapperField(message, 6, Diagnostic.deserialize(reader), Diagnostic));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return Occurrence.deserialize(bytes);
        }
    }
    scip.Occurrence = Occurrence;
    class Diagnostic extends pb_1.Message {
        constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("severity" in data && data.severity != undefined) {
                    this.severity = data.severity;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
            }
        }
        get severity() {
            return pb_1.Message.getField(this, 1);
        }
        set severity(value) {
            pb_1.Message.setField(this, 1, value);
        }
        get code() {
            return pb_1.Message.getField(this, 2);
        }
        set code(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get message() {
            return pb_1.Message.getField(this, 3);
        }
        set message(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get source() {
            return pb_1.Message.getField(this, 4);
        }
        set source(value) {
            pb_1.Message.setField(this, 4, value);
        }
        get tags() {
            return pb_1.Message.getField(this, 5);
        }
        set tags(value) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data) {
            const message = new Diagnostic({});
            if (data.severity != null) {
                message.severity = data.severity;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.severity != null) {
                data.severity = this.severity;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.severity !== undefined)
                writer.writeEnum(1, this.severity);
            if (typeof this.code === "string" && this.code.length)
                writer.writeString(2, this.code);
            if (typeof this.message === "string" && this.message.length)
                writer.writeString(3, this.message);
            if (typeof this.source === "string" && this.source.length)
                writer.writeString(4, this.source);
            if (this.tags !== undefined)
                writer.writePackedEnum(5, this.tags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Diagnostic();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.severity = reader.readEnum();
                        break;
                    case 2:
                        message.code = reader.readString();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.source = reader.readString();
                        break;
                    case 5:
                        message.tags = reader.readPackedEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return Diagnostic.deserialize(bytes);
        }
    }
    scip.Diagnostic = Diagnostic;
})(scip = exports.scip || (exports.scip = {}));
