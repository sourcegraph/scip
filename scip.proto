// An index contains one or more pieces of information about a given piece of
// source code or software artifact. Complementary information can be merged
// together from multiple sources to provide a unified code intelligence
// experience.
//
// Programs producing a file of this format is an "indexer" and may operate
// somewhere on the spectrum between precision, such as indexes produced by
// compiler-backed indexers, and heurstics, such as indexes produced by local
// syntax-directed analysis for scope rules.

syntax = "proto3";

package scip;

option go_package = "github.com/sourcegraph/scip/bindings/go/scip/";

// Index represents a complete SCIP index for a workspace this is rooted at a
// single directory. An Index message payload can have a large memory footprint
// and it's therefore recommended to emit and consume an Index payload one field
// value at a time.  To permit streaming consumption of an Index payload, the
// `metadata` field must appear at the start of the stream and must only appear
// once in the stream. Other field values may appear in any order.
message Index {
  // Metadata about this index.
  Metadata metadata = 1;
  // Documents that belong to this index.
  repeated Document documents = 2;
  // (optional) Symbols that are referenced from this index but are defined in
  // an external package (a separate `Index` message).  Leave this field empty
  // if you assume the external package will get indexed separately. If the
  // external package won't get indexed for some reason then you can use this
  // field to provide hover documentation for those external symbols.
  repeated SymbolInformation external_symbols = 3;
}

message Metadata {
  // Which version of this protocol was used to generate this index?
  ProtocolVersion version = 1;
  // Information about the tool that produced this index.
  ToolInfo tool_info = 2;
  // URI-encoded absolute path to the root directory of this index. All
  // documents in this index must appear in a subdirectory of this root
  // directory.
  string project_root = 3;
  // Text encoding of the source files on disk that are referenced from
  // `Document.relative_path`.
  TextEncoding text_document_encoding = 4;
}

enum ProtocolVersion {
  UnspecifiedProtocolVersion = 0;
}

enum TextEncoding {
  UnspecifiedTextEncoding = 0;
  UTF8 = 1;
  UTF16 = 2;
}

message ToolInfo {
  // Name of the indexer that produced this index.
  string name = 1;
  // Version of the indexer that produced this index.
  string version = 2;
  // Command-line arguments that were used to invoke this indexer.
  repeated string arguments = 3;
}

// Document defines the metadata about a source file on disk.
message Document {
  // (Required) Path to the text document relative to the directory supplied in
  // the associated `Metadata.project_root`. Not URI-encoded. This value should
  // not begin with a directory separator.
  string relative_path = 1;
  // Occurrences that appear in this file.
  repeated Occurrence occurrences = 2;
  // Symbols that are defined within this document.
  repeated SymbolInformation symbols = 3;
}

// Symbol is similar to a URI, it identifies a class, method, or a local
// variable. `SymbolInformation` contains rich metadata about symbols such as
// the docstring.
//
// Symbol has a standardized string representation, which can be used
// interchangeably with `Symbol`. The syntax for Symbol is the following:
// ```
//   <symbol>               ::= <scheme> ' ' <package> ' ' { <descriptor> } | 'local ' <local-id>
//   <package>              ::= <manager> ' ' <package-name> ' ' <version>
//   <scheme>               ::= any UTF-8, escape spaces with double space.
//   <manager>              ::= same as above, use the placeholder '.' to indicate an empty value
//   <package-name>         ::= same as above
//   <version>              ::= same as above
//   <descriptor>           ::= <package> | <type> | <term> | <method> | <type-parameter> | <parameter> | <meta>
//   <package>              ::= <name> '/'
//   <type>                 ::= <name> '#'
//   <term>                 ::= <name> '.'
//   <meta>                 ::= <name> ':'
//   <method>               ::= <name> '(' <method-disambiguator> ').'
//   <type-parameter>       ::= '[' <name> ']'
//   <parameter>            ::= '(' <name> ')'
//   <name>                 ::= <identifier>
//   <method-disambiguator> ::= <simple-identifier>
//   <identifier>           ::= <simple-identifier> | <escaped-identifier>
//   <simple-identifier>    ::= { <identifier-character> }
//   <identifier-character> ::= '_' | '+' | '-' | '$' | ASCII letter or digit
//   <escaped-identifier>   ::= '`' { <escaped-character> } '`'
//   <escaped-characters>   ::= any UTF-8 character, escape backticks with double backtick.
// ```
message Symbol {
  string scheme = 1;
  Package package = 2;
  repeated Descriptor descriptors = 3;
}

message Package {
  string manager = 1;
  string name = 2;
  string version = 3;
}

message Descriptor {
  enum Suffix {
    UnspecifiedSuffix = 0;
    Package = 1;
    Type = 2;
    Term = 3;
    Method = 4;
    TypeParameter = 5;
    Parameter = 6;
    // Can be used for any purpose.
    Meta = 7;
    Local = 8;
  }
  string name = 1;
  string disambiguator = 2;
  Suffix suffix = 3;
}

// SymbolInformation defines metadata about a symbol, such as the symbol's
// docstring or what package it's defined it.
message SymbolInformation {
  // Identifier of this symbol, which can be referenced from `Occurence.symbol`.
  // The string must be formatted according to the grammar in `Symbol`.
  string symbol = 1;
  // (optional, but strongly recommended) The markdown-formatted documentation
  // for this symbol. This field is repeated to allow different kinds of
  // documentation.  For example, it's nice to include both the signature of a
  // method (parameters and return type) along with the accompanying docstring.
  repeated string documentation = 3;
  // (optional) Relationships to other symbols (e.g., implements, type definition).
  repeated Relationship relationships = 4;
}

message Relationship {
  string symbol = 1;
  // When resolving "Find references", this field documents what other symbols
  // should be included together with this symbol. For example, consider the
  // following TypeScript code that defines two symbols `Animal#sound()` and
  // `Dog#sound()`:
  // ```ts
  // interface Animal {
  //           ^^^^^^ definition Animal#
  //   sound(): string
  //   ^^^^^ definition Animal#sound()
  // }
  // class Dog implements Animal {
  //       ^^^ definition Dog#, implementation_symbols = Animal#
  //   public sound(): string { return "woof" }
  //          ^^^^^ definition Dog#sound(), references_symbols = Animal#sound(), implementation_symbols = Animal#sound()
  // }
  // const animal: Animal = new Dog()
  //               ^^^^^^ reference Animal#
  // console.log(animal.sound())
  //                    ^^^^^ reference Animal#sound()
  // ```
  // Doing "Find references" on the symbol `Animal#sound()` should return
  // references to the `Dog#sound()` method as well. Vice-versa, doing "Find
  // references" on the `Dog#sound()` method should include references to the
  // `Animal#sound()` method as well.
  bool is_reference = 2;
  // Similar to `references_symbols` but for "Go to implementation".
  // It's common for the `implementation_symbols` and `references_symbols` fields
  // have the same values but that's not always the case.
  // In the TypeScript example above, observe that `implementation_symbols` has
  // the value `"Animal#"` for the "Dog#" symbol while `references_symbols` is
  // empty. When requesting "Find references" on the "Animal#" symbol we don't
  // want to include references to "Dog#" even if "Go to implementation" on the
  // "Animal#" symbol should navigate to the "Dog#" symbol.
  bool is_implementation = 3;
  // Similar to `references_symbols` but for "Go to type definition".
  bool is_type_definition = 4;
}

// SymbolRole declares what "role" a symbol has in an occurrence.  A role is
// encoded as a bitmask where each bit represents a different role. For example,
// to determine if the `Import` role is set test whether the second bit of the
// enum value is defined. In psuedo-code, this can be implemented with the
// logic: `const isImportRole = (role.value & SymbolRole.Import.value) > 0`.
enum SymbolRole {
  UnspecifiedSymbolRole = 0;
  // Is the symbol defined here? If not, then this is a symbol reference.
  Definition = 0x1;
  // Is the symbol imported here?
  Import = 0x2;
  // Is the symbol written here?
  WriteAccess = 0x4;
  // Is the symbol read here?
  ReadAccess = 0x8;
  // Is the symbol in generated code?
  Generated = 0x10;
  // Is the symbol in test code?
  Test = 0x20;
}

enum SyntaxKind {
  UnspecifiedSyntaxKind = 0;

  // Comment, including comment markers and text
  Comment = 1;

  // `;` `.` `,`
  PunctuationDelimiter = 2;
  // (), {}, [] when used syntactically
  PunctuationBracket = 3;

  // `if`, `else`, `return`, `class`, etc.
  IdentifierKeyword = 4;

  // `+`, `*`, etc.
  IdentifierOperator = 5;

  // non-specific catch-all for any identifier not better described elsewhere
  Identifier = 6;
  // Identifiers builtin to the language: `min`, `print` in Python.
  IdentifierBuiltin = 7;
  // Identifiers representing `null`-like values: `None` in Python, `nil` in Go.
  IdentifierNull = 8;
  // `xyz` in `const xyz = "hello"`
  IdentifierConstant = 9;
  // `var X = "hello"` in Go
  IdentifierMutableGlobal = 10;
  // both parameter definition and references
  IdentifierParameter = 11;
  // identifiers for variable definitions and references within a local scope
  IdentifierLocal = 12;
  // Used when identifier shadowes some other identifier within the scope
  IdentifierShadowed = 13;
  // `package main`
  IdentifierModule = 14;

  // Function call/reference
  IdentifierFunction = 15;
  // Function definition only
  IdentifierFunctionDefinition = 16;

  // Macro call/reference
  IdentifierMacro = 17;
  // Macro definition only
  IdentifierMacroDefinition = 18;

  // non-builtin types, including namespaces
  IdentifierType = 19;
  // builtin types only, such as `str` for Python or `int` in Go
  IdentifierBuiltinType = 20;

  // Python decorators, c-like __attribute__
  IdentifierAttribute = 21;

  // `\b`
  RegexEscape = 22;
  // `*`, `+`
  RegexRepeated = 23;
  // `.`
  RegexWildcard = 24;
  // `(`, `)`, `[`, `]`
  RegexDelimiter = 25;
  // `|`, `-`
  RegexJoin = 26;

  // Literal strings: "Hello, world!"
  StringLiteral = 27;
  // non-regex escapes: "\t", "\n"
  StringLiteralEscape = 28;
  // datetimes within strings, special words within a string, `{}` in format strings
  StringLiteralSpecial = 29;
  // "key" in { "key": "value" }, useful for example in JSON
  StringLiteralKey = 30;
  // 'c' or similar, in languages that differentiate strings and characters
  CharacterLiteral = 31;
  // Literal numbers, both floats and integers
  NumericLiteral = 32;
  // `true`, `false`
  BooleanLiteral = 33;

  // Used for XML-like tags
  Tag = 34;
  // Attribute name in XML-like tags
  TagAttribute = 35;
  // Delimiters for XML-like tags
  TagDelimiter = 36;
}

// Occurrence associates a source position with a symbol and/or highlighting
// information.
message Occurrence {
  // Source position of this occurrence. Must be exactly three or four
  // elements:
  //
  // - Four elements: `[startLine, startCharacter, endLine, endCharacter]`
  // - Three elements: `[startLine, startCharacter, endCharacter]`. The end line
  //   is inferred to have the same value as the start line.
  //
  // Line numbers and characters are always 0-based. Make sure to increment the
  // line/character values before displaying them in an editor-like UI because
  // editors conventionally use 1-based numbers.
  //
  // Historical note: the original draft of this schema had a `Range` message
  // type with `start` and `end` fields of type `Position`, mirroring LSP.
  // Benchmarks revealed that this encoding was inefficient and that we could
  // reduce the total payload size of an index by 50% by using `repeated int32`
  // instead.  The `repeated int32` encoding is admittedly more embarrassing to
  // work with in some programming languages but we hope the performance
  // improvements make up for it.
  repeated int32 range = 1;
  // (optional) The symbol that appears at this position. See
  // `SymbolInformation.symbol` for how to format symbols as strings.
  string symbol = 2;
  // (optional) Bitmask for what `SymbolRole` apply to this occurrence. See
  // `SymbolRole` for how to read and write this field.
  int32 symbol_roles = 3;
  // (optional) Markdown-formatted documentation for this specific range.  If
  // empty, the `Symbol.documentation` field is used instead. One example
  // where this field might be useful is when the symbol represents a generic
  // function (with abstract type parameters such as `List<T>`) and at this
  // occurrence we know the exact values (such as `List<String>`).
  repeated string override_documentation = 4;
  // (optional) What syntax highlighting class should be used for this range?
  SyntaxKind syntax_kind = 5;
  // Diagnostics that have been reported for this specific range.
  repeated Diagnostic diagnostics = 6;
}

// Represents a diagnostic, such as a compiler error or warning, which should be
// reported for a document.
message Diagnostic {
  // Should this diagnostic be reported as an error, warning, info, or hint?
  Severity severity = 1;
  // Code of this diagnostic, which might appear in the user interface.
  string code = 2;
  // Message of this diagnostic.
  string message = 3;
  // Human-readable string describing the source of this diagnostic, e.g.
  // 'typescript' or 'super lint'.
  string source = 4;
  repeated DiagnosticTag tags = 5;
}

enum Severity {
  UnspecifiedSeverity = 0;
  Error = 1;
  Warning = 2;
  Information = 3;
  Hint = 4;
}

enum DiagnosticTag {
  UnspecifiedDiagnosticTag = 0;
  Unnecessary = 1;
  Deprecated = 2;
}
